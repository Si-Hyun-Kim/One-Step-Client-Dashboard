#!/bin/bash
# agent/check.sh - Agent Ïã§Ìñâ Ï†Ñ ÌôòÍ≤Ω Í≤ÄÏ¶ù

echo "üîç MCP Agent Environment Check"
echo "================================"
echo ""

ERRORS=0
WARNINGS=0

# 1. ÎîîÎ†âÌÜ†Î¶¨ Íµ¨Ï°∞ ÌôïÏù∏
echo "üìÅ Directory Structure:"
for dir in "logs" "rules"; do
    if [ -d "$dir" ]; then
        echo "   ‚úÖ $dir/"
    else
        echo "   ‚ùå $dir/ (missing)"
        ERRORS=$((ERRORS + 1))
    fi
done
echo ""

# 2. ÌïÑÏàò ÌååÏùº ÌôïÏù∏
echo "üìÑ Required Files:"
FILES=("mcp_agent.py")
for file in "${FILES[@]}"; do
    if [ -f "$file" ]; then
        echo "   ‚úÖ $file"
    else
        echo "   ‚ùå $file (missing)"
        ERRORS=$((ERRORS + 1))
    fi
done

# MCP ÏÑúÎ≤Ñ ÌôïÏù∏
if [ -f "../mcp_suricata_server.py" ]; then
    echo "   ‚úÖ ../mcp_suricata_server.py"
else
    echo "   ‚ö†Ô∏è  ../mcp_suricata_server.py (not found)"
    WARNINGS=$((WARNINGS + 1))
fi
echo ""

# 3. Python ÌôòÍ≤Ω ÌôïÏù∏
echo "üêç Python Environment:"
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version 2>&1 | awk '{print $2}')
    echo "   ‚úÖ Python 3: $PYTHON_VERSION"
    
    # Î≤ÑÏ†Ñ Ï≤¥ÌÅ¨ (3.7 Ïù¥ÏÉÅ Í∂åÏû•)
    PYTHON_MAJOR=$(echo $PYTHON_VERSION | cut -d. -f1)
    PYTHON_MINOR=$(echo $PYTHON_VERSION | cut -d. -f2)
    
    if [ "$PYTHON_MAJOR" -eq 3 ] && [ "$PYTHON_MINOR" -ge 7 ]; then
        echo "      (Version OK: >= 3.7)"
    else
        echo "      ‚ö†Ô∏è  Python 3.7+ recommended"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo "   ‚ùå Python 3 not found"
    ERRORS=$((ERRORS + 1))
fi
echo ""

# 4. Python Î™®Îìà ÌôïÏù∏
echo "üì¶ Python Modules:"
MODULES=("mcp" "json" "asyncio" "collections" "datetime" "pathlib" "subprocess" "threading")
for module in "${MODULES[@]}"; do
    if python3 -c "import $module" 2>/dev/null; then
        echo "   ‚úÖ $module"
    else
        echo "   ‚ùå $module (not installed)"
        if [ "$module" = "mcp" ]; then
            ERRORS=$((ERRORS + 1))
            echo "      Install: sudo pip3 install mcp"
        fi
    fi
done
echo ""

# 5. Í∂åÌïú ÌôïÏù∏
echo "üîê Permissions:"
if [ -x "mcp_agent.py" ]; then
    echo "   ‚úÖ mcp_agent.py is executable"
else
    echo "   ‚ö†Ô∏è  mcp_agent.py is not executable"
    echo "      Fix: chmod +x mcp_agent.py"
    WARNINGS=$((WARNINGS + 1))
fi

if [ -w "logs" ]; then
    echo "   ‚úÖ logs/ is writable"
else
    echo "   ‚ùå logs/ is not writable"
    ERRORS=$((ERRORS + 1))
fi

if [ -w "rules" ]; then
    echo "   ‚úÖ rules/ is writable"
else
    echo "   ‚ùå rules/ is not writable"
    ERRORS=$((ERRORS + 1))
fi
echo ""

# 6. Suricata ÌôïÏù∏
echo "üõ°Ô∏è  Suricata:"
if command -v suricata &> /dev/null; then
    SURICATA_VERSION=$(suricata --version 2>&1 | head -n1 | awk '{print $2}')
    echo "   ‚úÖ Suricata: $SURICATA_VERSION"
else
    echo "   ‚ö†Ô∏è  Suricata not found (agent will work but no alerts)"
    WARNINGS=$((WARNINGS + 1))
fi

if [ -f "/var/log/suricata/eve.json" ]; then
    echo "   ‚úÖ eve.json exists"
    
    # ÏùΩÍ∏∞ Í∂åÌïú ÌôïÏù∏
    if [ -r "/var/log/suricata/eve.json" ]; then
        echo "   ‚úÖ eve.json is readable"
    else
        echo "   ‚ö†Ô∏è  eve.json is not readable"
        echo "      Fix: sudo chmod 644 /var/log/suricata/eve.json"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo "   ‚ö†Ô∏è  eve.json not found"
    WARNINGS=$((WARNINGS + 1))
fi
echo ""

# 7. iptables Í∂åÌïú ÌôïÏù∏
echo "üî• Firewall:"
if command -v iptables &> /dev/null; then
    echo "   ‚úÖ iptables installed"
    
    # sudo ÏóÜÏù¥ Ïã§Ìñâ Í∞ÄÎä•ÌïúÏßÄ ÌôïÏù∏
    if sudo -n iptables -L > /dev/null 2>&1; then
        echo "   ‚úÖ iptables sudo access (passwordless)"
    else
        echo "   ‚ö†Ô∏è  iptables requires password"
        echo "      To enable passwordless: sudo visudo"
        echo "      Add: $(whoami) ALL=(ALL) NOPASSWD: /usr/sbin/iptables"
        WARNINGS=$((WARNINGS + 1))
    fi
else
    echo "   ‚ö†Ô∏è  iptables not found"
    WARNINGS=$((WARNINGS + 1))
fi
echo ""

# Í≤∞Í≥º ÏöîÏïΩ
echo "================================"
echo "Summary:"
echo "  Errors:   $ERRORS"
echo "  Warnings: $WARNINGS"
echo ""

if [ $ERRORS -eq 0 ]; then
    echo "‚úÖ All critical checks passed!"
    echo ""
    echo "Ready to run:"
    echo "  python3 mcp_agent.py"
    exit 0
else
    echo "‚ùå Please fix errors before running agent"
    exit 1
fi